## Reference:
## CloudFormation template snippet: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html#quickref-ecs-example-1.yaml
## CloudFormation resource definition reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
## CloudFormation template: https://github.com/awslabs/aws-cloudformation-templates
## Reference architecture for ECS with CloudFormation: https://github.com/aws-samples/ecs-refarch-cloudformation

AWSTemplateFormatVersion: "2010-09-09"
Description: gh-service template
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: staging
    AllowedValues: [staging, production]
#  VpcId:
#    Type: AWS::EC2::VPC::Id
#    Description: Select a VPC that allows instances access to the Internet.
#  SubnetId:
#    Type: List<AWS::EC2::Subnet::Id>
#    Description: Select at least two subnets in your selected VPC.
  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in your ECS cluster.

Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMIID: ami-084cb340923dc7101

Resources:
##### VPC and Subnet section #####
  GHVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  GHInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Gateway

  GHInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref GHInternetGateway
      VpcId: !Ref GHVPC

  GHPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GHVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  GHPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GHVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.192.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  GHPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GHVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GHInternetGatewayAttachment
    Properties:
        RouteTableId: !Ref GHPublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref GHInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GHPublicRouteTable
      SubnetId: !Ref GHPublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GHPublicRouteTable
      SubnetId: !Ref GHPublicSubnet2

##### ECS cluster and task definition section #####
  GHCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Join ['-', [!Ref 'AWS::StackName', !Ref EnvironmentName]]

  GHTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', task-definition]]
      TaskRoleArn: !Ref ECSTaskRole
      NetworkMode: bridge
      RequiresCompatibilities:
        - "EC2"
      ContainerDefinitions:
        -
          Name: gh-service
          Image: "joelin/gh-service:latest"
          Memory: 512
          Essential: true
#          Ulimits:
#            - Name: memblock
#              SoftLimit: 500
#              HardLimit: 500
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
          Environment:
            - Name: "profile"
              Value: !Ref EnvironmentName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: gh-service-stream

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [!Ref 'AWS::StackName', log-group]]
      RetentionInDays: 14

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ecs-task-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ecs-task-policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: [
                "ssm:*" # permission to access Parameter Store
                ]
              Resource: '*'

###### Service and Application Load Balancer definition section #####
  GHService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${AWS::StackName}-service
      Cluster: !Ref GHCluster
      TaskDefinition: !Ref GHTaskDefinition
      Role: arn:aws:iam::912120796431:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS #!Ref EcsServiceRole
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 90 # important setting to remedy a unhealthy target issue
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: gh-service
          ContainerPort: '8080'
          TargetGroupArn: !Ref ECSTargetGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    #DependsOn: EcsServiceRole
    Properties:
      Port: '80'
      Protocol: HTTP
      LoadBalancerArn: !Ref ECSALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ECSTargetGroup

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', ecs-apploadbalancer]]
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref GHPublicSubnet1
        - !Ref GHPublicSubnet2
      SecurityGroups: [!Ref ALBSecurityGroup]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ECSTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      Name: !Sub ${AWS::StackName}-target-group
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/actuator/health
      HealthCheckProtocol: HTTP
      Protocol: HTTP
      Port: 8080
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref GHVPC

#  EcsServiceRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [ecs.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      ManagedPolicyArns:
#        - "arn:aws:iam::aws:policy/aws-service-role/AmazonECSServiceRolePolicy"
#      Path: /
#      Policies:
#      - PolicyName: !Sub ${AWS::StackName}-ecs-service-policy
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Action: [
#              'elasticloadbalancing:DeregisterInstancesFromLoadBalancer',
#              'elasticloadbalancing:DeregisterTargets',
#              'elasticloadbalancing:Describe*',
#              'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
#              'elasticloadbalancing:RegisterTargets',
#              'ec2:Describe*',
#              'ec2:AuthorizeSecurityGroupIngress'
#              ]
#            Resource: '*'


  ## Troubleshoot dynamic port issue: https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-unhealthy-checks-ecs/
  ## CloudFormation circular dependency fix: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref GHVPC
      GroupName: !Sub ${AWS::StackName}-ecs-security-group
      GroupDescription: !Sub ${AWS::StackName} ECS Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 58080
          ToPort: 58080
          CidrIp: 0.0.0.0/0 

  ## Use ephemeral port
  ECSSecurityGroupDynamicPortInbound:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref ECSSecurityGroup
        IpProtocol: tcp
        FromPort: 32768
        ToPort: 65535
        SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref GHVPC
      GroupName: !Sub ${AWS::StackName}-alb-security-group
      GroupDescription: !Sub ${AWS::StackName} ECS Security Group
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALBSecurityGroupDynamicPortOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: -1
      DestinationSecurityGroupId: !Ref ECSSecurityGroup

##### Auto Scaling and Container Instance definition section #####
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-autoscaling-group
      VPCZoneIdentifier:
        - !Ref GHPublicSubnet1
        - !Ref GHPublicSubnet2
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '1'
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        # Count: !Ref DesiredCapacity
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
        # MinInstancesInService: "1"
        WaitOnResourceSignals: "true"

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: GHService
    Properties:
      MinCapacity: 1
      MaxCapacity: !Ref MaxSize
      ResourceId: !Join ['', [service/, !Ref 'GHCluster', /, !GetAtt [GHService, Name]]]
      RoleARN: arn:aws:iam::912120796431:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling #!GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

#  AutoscalingRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [application-autoscaling.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      ManagedPolicyArns:
#        - "arn:aws:iam::aws:policy/aws-service-role/AutoScalingServiceRolePolicy"
#      Path: /
#      Policies:
#      - PolicyName: !Sub ${AWS::StackName}-scalable-target-policy
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Action: [
#              'application-autoscaling:*',
#              'cloudwatch:DescribeAlarms',
#              'cloudwatch:PutMetricAlarm',
#              'ecs:DescribeServices',
#              'ecs:UpdateService'
#              ]
#            Resource: '*'

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-autoscaling-policy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref ECSSecurityGroup]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: ecs-gh-service
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${GHCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ecsInstanceRole] # [!Ref EC2Role]

#  EC2Role:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [ec2.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      Path: /
#      Policies:
#      - PolicyName: !Sub ${AWS::StackName}-ec2-instance-policy
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Action: [
#              'ecs:CreateCluster',
#              'ecs:DeregisterContainerInstance',
#              'ecs:DiscoverPollEndpoint',
#              'ecs:Poll',
#              'ecs:RegisterContainerInstance',
#              'ecs:StartTelemetrySession',
#              'ecs:Submit*',
#              'logs:CreateLogStream',
#              'logs:PutLogEvents']
#            Resource: '*'
