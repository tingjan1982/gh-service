/**
 * Gradle properties explained:
 * https://docs.gradle.org/current/userguide/build_environment.html
 */
buildscript {
    ext {
        kotlinVersion = '1.2.41'
        springBootVersion = '2.0.1.RELEASE'
        githubToken = System.getProperty("githubToken")
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.1.0")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2')
    }
}

plugins {
    id "co.riiid.gradle" version "0.4.2"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.palantir.docker'

group = 'io.geekhub'
version = '0.0.1-SNAPSHOT'

if (project.findProperty("version.number")) {
    version = project.property("version.number")
}

def tagVersion = "v${version.toString().replace("-SNAPSHOT", "")}"

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}


ext {
    springCloudVersion = 'Finchley.M9'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-data-couchbase')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('io.springfox:springfox-swagger-ui:2.7.0')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard')
    compile('org.springframework.session:spring-session-core')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('org.postgresql:postgresql')
    runtime('org.hsqldb:hsqldb')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

    /**
     * Enable JUnit 5 in Gradle:
     * https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-running-unit-tests-with-gradle/
     */
    testCompile('org.junit.jupiter:junit-jupiter-api:5.1.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.1.0')
    testRuntime('org.junit.platform:junit-platform-launcher:1.1.0')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

/**
 * Customize resources directory to include non soure code files from kotlin directory.
 */
sourceSets {
    main {
        resources {
            srcDirs 'src/main/resources', 'src/main/kotlin'
            exclude '*.kt'
        }
    }
}

/**
 * Add the ability to pass spring active profile when running spring boot via Gradle.
 * The default is embedded which will initialize an embedded HSQL database.
 *
 * The spring profile can be specified by using Gradle's -P option like so:
 * ./gradlew bootRun -Pspring.profiles.active=<profile name>
 */
bootRun {
    doFirst() {
        def springProfile = "embedded"

        if (project.findProperty("spring.profiles.active")) {
            springProfile = project.property("spring.profiles.active")
        }

        logger.info("Spring profile to use: ${springProfile}")
        systemProperty 'spring.profiles.active', springProfile
    }
}

/**
 * GitHub - https://github.com/palantir/gradle-docker
 * Gradle Plugin - https://plugins.gradle.org/plugin/com.palantir.docker
 */
docker {
    dependsOn build
    name "joelin/${bootJar.baseName}"
    tags 'latest'
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

githubRelease {
    dependsOn = [build]

    doFirst {
        logger.info("Publish artifact ${bootJar.archiveName} to GitHub")
    }
}

/**
 * Reference:
 * https://github.com/riiid/gradle-github-plugin
 * https://developer.github.com/v3/repos/releases/
 */
github {
    owner = 'tingjan1982'
    repo = 'gh-service'
    token = "${githubToken}"
    tagName = "${tagVersion}"
    targetCommitish = 'master'
    name = "${tagVersion}"
    assets = ["${bootJar.archivePath}"]
}
